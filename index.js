const express = require("express");
const fs = require("fs");
const app = express();
const PORT = process.env.PORT || 3000;

let data = require("./data.json");
app.use(express.json());

const fancyFonts = (text) => {
  const boldMap = {
    a: 'ùóÆ', b: 'ùóØ', c: 'ùó∞', d: 'ùó±', e: 'ùó≤', f: 'ùó≥', g: 'ùó¥',
    h: 'ùóµ', i: 'ùó∂', j: 'ùó∑', k: 'ùó∏', l: 'ùóπ', m: 'ùó∫', n: 'ùóª',
    o: 'ùóº', p: 'ùóΩ', q: 'ùóæ', r: 'ùóø', s: 'ùòÄ', t: 'ùòÅ', u: 'ùòÇ',
    v: 'ùòÉ', w: 'ùòÑ', x: 'ùòÖ', y: 'ùòÜ', z: 'ùòá',
    A: 'ùóî', B: 'ùóï', C: 'ùóñ', D: 'ùóó', E: 'ùóò', F: 'ùóô', G: 'ùóö',
    H: 'ùóõ', I: 'ùóú', J: 'ùóù', K: 'ùóû', L: 'ùóü', M: 'ùó†', N: 'ùó°',
    O: 'ùó¢', P: 'ùó£', Q: 'ùó§', R: 'ùó•', S: 'ùó¶', T: 'ùóß', U: 'ùó®',
    V: 'ùó©', W: 'ùó™', X: 'ùó´', Y: 'ùó¨', Z: 'ùó≠',
    ' ': ' ', '.': '.', ',': ',', '?': '?', '!': '!', '-': '-', '_': '_'
  };
  return text.split('').map(c => boldMap[c] || c).join('');
};

const removeEmojis = (text) => {
  return text.replace(/([\u2700-\u27BF]|[\uE000-\uF8FF]|[\uD800-\uDFFF]|[\uFE00-\uFE0F]|[\u200D])/g, '').trim();
};

const emojis = ['ü•∞', 'üòä', 'üòΩ', 'üòç', 'üòò', 'üíñ', 'üíô', 'üíú', 'üåü', '‚ú®'];

app.get("/", (req, res) => {
  res.send("‚úÖ rX SimSimi API is running!");
});

app.get("/simsimi", (req, res) => {
  let text = req.query.text?.toLowerCase();
  if (!text) return res.json({ response: "‚ùå Please provide text" });

  text = removeEmojis(text);
  const replies = data[text];

  if (!replies || replies.length === 0) {
    return res.json({
      response: fancyFonts("sorry bby, ata amake teach kora hoy ni, plz teach me <ü•∫")
    });
  }

  let reply = replies[Math.floor(Math.random() * replies.length)];
  reply = fancyFonts(reply);

  const countEmoji = Math.floor(Math.random() * 2) + 1;
  for (let i = 0; i < countEmoji; i++) {
    const emoji = emojis[Math.floor(Math.random() * emojis.length)];
    reply += " " + emoji;
  }

  res.json({ response: reply });
});

app.get("/teach", (req, res) => {
  const { ask, ans } = req.query;
  if (!ask || !ans) return res.json({ message: "‚ùå Provide ask and ans" });

  const question = removeEmojis(ask.toLowerCase());
  const replies = ans.split(" - ").map(r => r.trim()).filter(Boolean);

  if (!data[question]) data[question] = [];
  replies.forEach(r => {
    if (!data[question].includes(r)) data[question].push(r);
  });

  fs.writeFileSync("./data.json", JSON.stringify(data, null, 2));
  res.json({
    message: "‚úÖ Replies added successfully",
    total: data[question].length,
    trigger: question,
    replies: data[question]
  });
});

app.get("/list", (req, res) => {
  const totalQuestions = Object.keys(data).length;
  const totalReplies = Object.values(data).reduce((sum, r) => sum + r.length, 0);
  res.json({
    code: 200,
    totalQuestions,
    totalReplies,
    author: "rX Abdullah"
  });
});

app.get("/delete", (req, res) => {
  const { ask, ans } = req.query;
  const question = removeEmojis(ask?.toLowerCase());
  if (!question || !ans) return res.json({ message: "‚ùå Provide ask and ans" });

  if (!data[question]) return res.json({ message: "‚ùå Question not found" });

  data[question] = data[question].filter(r => r !== ans);
  if (data[question].length === 0) delete data[question];

  fs.writeFileSync("./data.json", JSON.stringify(data, null, 2));
  res.json({ message: "‚úÖ Reply deleted successfully" });
});

app.get("/edit", (req, res) => {
  const { ask, old, new: updated } = req.query;
  const question = removeEmojis(ask?.toLowerCase());
  if (!question || !old || !updated) {
    return res.json({ message: "‚ùå Provide ask, old and new" });
  }

  if (!data[question]) return res.json({ message: "‚ùå Question not found" });

  const index = data[question].indexOf(old);
  if (index === -1) return res.json({ message: "‚ùå Old reply not found" });

  data[question][index] = updated;

  fs.writeFileSync("./data.json", JSON.stringify(data, null, 2));
  res.json({ message: "‚úÖ Reply updated successfully" });
});

app.get("/simsimi-list", (req, res) => {
  const question = removeEmojis(req.query.ask?.toLowerCase());
  if (!question) return res.json({ message: "‚ùå Provide a trigger to list replies" });

  if (!data[question]) return res.json({ message: "‚ùå No replies found for this trigger" });

  res.json({
    trigger: question,
    total: data[question].length,
    replies: data[question]
  });
});

app.listen(PORT, () => {
  console.log(`‚úÖ Server is running on port ${PORT}`);
});
